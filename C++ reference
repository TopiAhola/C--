Contents:
    Data structures
    C++ Keywords
    <iostream>
    <fstream>
    <vector>
    <string>
    <cstring>
    <cmath>
    <ctime>
    <algorithm>


//////////////////////////////////////////////////////////////////
Data structures

Data Structure	Description
Vector	        Stores elements like an array but can dynamically change in size. Adding and removing of elements are usually done at the end. Elements can be accessed by index.
List	        Stores elements sequentially, where each element is connected to the next. Adding and removing of elements can be done at both ends. Not accessible by index.
Stack	        Stores elements in a specific order, called LIFO (Last In, First Out), where elements can only be added and removed from the top. Not accessible by index.
Queue	        Stores elements in a specific order, called FIFO (First In, First Out), where elements are added at the end and removed from the front. Not accessible by index.
Deque	        Stores elements in a double-ended queue, where elements can be added and removed from both ends. Elements can be accessed by index.
Set	            Stores unique elements. Not accessible by index.
Map	            Stores elements in "key/value" pairs. Accessible by keys (not by index).

#include <vector>   // Include the vector library
#include <list>     // Include the list library
#include <set>      // Include the set library
#include <map>      // Include the map library
#include <stack>    // Include the stack library
#include <queue>    // Include the queue library
    


//////////////////////////////////////////////////////////////////
C++ Keywords
A list of useful keywords in C++ can be found in the table below.

Keyword	Description
and	An alternative way to write the logical && operator
and_eq	An alternative way to write the &= assignment operator
bitand	An alternative way to write the & bitwise operator
bitor	An alternative way to write the | bitwise operator
bool	A data type that can only store true or false values
break	Breaks out of a loop or a switch block
case	Marks a block of code in switch statements
catch	Catches exceptions generated by try statements
char	A data type that can store a single character
class	Defines a class
compl	An alternative way to write the ~ bitwise operator
const	Defines a variable or parameter as a constant (unchangeable) or specifies that a class method does not modify attributes of the class
continue	Continues to the next iteration of a loop
default	Specifies the default block of code in a switch statement
delete	Frees dynamic memory
do	Used together with while to create a do/while loop
double	A data type that is usually 64 bits long which can store fractional numbers
else	Used in conditional statements
enum	Declares an enumerated type
false	A boolean value equivalent to 0
float	A data type that is usually 32 bits long which can store fractional numbers
for	Creates a for loop
friend	Specifies classes and functions which have access to private and protected members
goto	Jumps to a line of code specified by a label
if	Makes a conditional statement
int	A data type that is usually 32 bits long which can store whole numbers
long	Ensures that an integer is at least 32 bits long (use long long to ensure 64 bits)
namespace	Declares a namespace
new	Reserves dynamic memory
not	An alternative way to write the logical ! operator
not_eq	An alternative way to write the != comparison operator
or	An alternative way to write the logical || operator
or_eq	An alternative way to write the |= assignment operator
private	An access modifier which makes a member only accessible within the declared class
protected	An access modifier which makes a member only accessible within the declared class and its children
public	An access modifier which makes a member accessible from anywhere
return	Used to return a value from a function
short	Reduces the size of an integer to 16 bits
signed	Specifies that an int or char can represent positive and negative values (this is the default so the keyword is not usually necessary)
sizeof	An operator that returns the amount of memory occupied by a variable or data type
static	Specifies that an attribute or method belongs to the class itself instead of instances of the class
Specifies that a variable in a function keeps its value after the function ends
struct	Defines a structure
switch	Selects one of many code blocks to be executed
template	Declares a template class or template function
this	A variable that is available inside class methods and constructors which contians a pointer to a class instance
throw	Creates a custom error which can be caught by a try...catch statement
true	A boolean value equivalent to 1
try	Creates a try...catch statement
typedef	Defines a custom data type
unsigned	Specifies that an int or char should only represent positive values which allows for storing numbers up to twice as large
using	Allows variables and functions from a namespace to be used without the namespace's prefix
virtual	Specifies that a class method is virtual
void	Indicates a function that does not return a value or specifies a pointer to a data with an unspecified type
while	Creates a while loop
xor	An alternative way to write the ^ bitwise operator
xor_eq	An alternative way to write the ^= assignment operator


//////////////////////////////////////////////////////////////////
<iostream>
The <iostream> library provides objects which can read user input and output data to the console or to a file.

A list of all iostream objects can be found in the table below.

Object	Description
cerr	An output stream for error messages
clog	An output stream to log program information
cin	An input stream that reads keyboard input from the console by default
cout	An output stream which writes output to the console by default
wcerr	The same as cerr but outputs wide char (wchar_t) data rather than char data
wclog	The same as clog but outputs wide char (wchar_t) data rather than char data
wcin	The same as cin but interprets each input character as a wide char (wchar_t)
wcout	The same as cout but outputs wide char (wchar_t) data rather than char data


//////////////////////////////////////////////////////////////////
<fstream>
The <fstream> library provides classes for reading and writing into files or data streams.

A list of useful fstream classes can be found in the table below.

Class	Description
filebuf	A lower level file handling class used internally by the fstream, ifstream and ofstream classes
fstream	A class that can read and write to files
ifstream	A class that can read from files
ofstream	A class that can write to files


//////////////////////////////////////////////////////////////////
<vector>
The <vector> library has many functions that allow you to perform tasks on vectors.

A list of popular vector functions can be found in the table below.
Function	Description
assign()	    Fills a vector with multiple values
at()	        Returns an indexed element from a vector
back()	        Returns the last element of a vector
begin()	        Returns an iterator pointing to the beginning of a vector
capacity()	    Returns the number of elements that a vector's reserved memory is able to store
clear()	        Removes all of the contents of a vector
data()	        Returns a pointer to the block of memory where a vector's elements are stored
empty()     	Checks whether a vector is empty or not
end()	        Returns an iterator pointing to the end of a vector
erase()	        Removes a number of elements from a vector
front()	        Returns the first element of a vector
insert()	    Inserts a number of elements into a vector
max_size()	    Returns the maximum number of elements that a vector can have
pop_back()	    Removes the last element of a vector
push_back()	    Adds an element to the end of a vector
rbegin()	    Returns a reverse iterator pointing to the last element of a vector
rend()	        Returns a reverse iterator pointing to a position right before the first element of a vector
reserve()	    Reserves memory for a vector
resize()	    Changes the size of a vector, adding or removing elements if necessary
shrink_to_fit()	Reduces the reseved memory of a vector if necessary to exactly fit the number of elements
size()	        Returns the number of elements in a vector
swap()	        Swaps the contents of one vector with another


//////////////////////////////////////////////////////////////////
<string>
The <string> library has many functions that allow you to perform tasks on strings.

A list of popular string functions can be found in the table below.

Function	Description
at()	Returns an indexed character from a string
length()	Returns the length of a string
size()	Alias of length(). Returns the length of a string
max_size()	Returns the maximum length of a string
empty()	Checks wheter a string is empty or not
append()	Appends a string (or a part of a string) to another string
substr()	Returns a part of a string from a start index (position) and length
find()	Returns the index (position) of the first occurrence of a string or character
rfind()	Returns the index (position) of the last occurrence of a string or character
replace()	Replaces a part of a string with another string
insert()	Inserts a string at a specified index (position)
erase()	Removes characters from a string
compare()	Compares two strings


//////////////////////////////////////////////////////////////////
<cstring>
The <cstring> library has many functions that allow you to perform tasks on arrays and C-style strings.

Note that C-style strings are different than regular strings. A C-style string is an array of characters, created with the char type. To learn more about C-style strings, read our C Strings Tutorial.

A list of all cstring functions can be found in the table below.

Function	Description
memchr()	Returns a pointer to the first occurrence of a value in a block of memory
memcmp()	Compares two blocks of memory to determine which one represents a larger numeric value
memcpy()	Copies data from one block of memory to another
memmove()	Copies data from one block of memory to another accounting for the possibility that the blocks of memory overlap
memset()	Sets all of the bytes in a block of memory to the same value
strcat()	Appends one C-style string to the end of another
strchr()	Returns a pointer to the first occurrence of a character in a C-style string
strcmp()	Compares the ASCII values of characters in two C-style strings to determine which string has a higher value
strcoll()	Compares the locale-based values of characters in two C-style strings to determine which string has a higher value
strcpy()	Copies the characters of a C-style string into the memory of another string
strcspn()	Returns the length of a C-style string up to the first occurrence of one of the specified characters
strerror()	Returns a C-style string describing the meaning of an error code
strlen()	Return the length of a C-style string
strncat()	Appends a number of characters from a C-style string to the end of another string
strncmp()	Compares the ASCII values of a specified number of characters in two C-style strings to determine which string has a higher value
strncpy()	Copies a number of characters from one C-style string into the memory of another string
strpbrk()	Returns a pointer to the first position in a C-style string which contains one of the specified characters
strrchr()	Returns a pointer to the last occurrence of a character in a C-style string
strspn()	Returns the length of a C-style string up to the first character which is not one of the specified characters
strstr()	Returns a pointer to the first occurrence of a C-style string in another string
strtok()	Splits a string into pieces using delimiters
strxfrm()	Convert characters in a C-style string from ASCII encoding to the encoding of the current locale


//////////////////////////////////////////////////////////////////
<cmath>

abs(x)	Returns the absolute value of x
acos(x)	Returns the arccosine of x, in radians
acosh(x)	Returns the hyperbolic arccosine of x
asin(x)	Returns the arcsine of x, in radians
asinh(x)	Returns the hyperbolic arcsine of x
atan(x)	Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)	Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)
atanh(x)	Returns the hyperbolic arctangent of x
cbrt(x)	Returns the cube root of x
ceil(x)	Returns the value of x rounded up to its nearest integer
copysign(x, y)	Returns the first floating point x with the sign of the second floating point y
cos(x)	Returns the cosine of x (x is in radians)
cosh(x)	Returns the hyperbolic cosine of x
exp(x)	Returns the value of Ex
exp2(x)	Returns the value of 2x
expm1(x)	Returns ex-1
erf(x)	Returns the value of the error function at x
erfc(x)	Returns the value of the complementary error function at x
fabs(x)	Returns the absolute value of a floating x
fdim(x)	Returns the positive difference between x and y
floor(x)	Returns the value of x rounded down to its nearest integer
fma(x, y, z)	Returns x*y+z without losing precision
fmax(x, y)	Returns the highest value of a floating x and y
fmin(x, y)	Returns the lowest value of a floating x and y
fmod(x, y)	Returns the floating point remainder of x/y
frexp(x, y)	With x expressed as m*2n, returns the value of m (a value between 0.5 and 1.0) and writes the value of n to the memory at the pointer y
hypot(x, y)	Returns sqrt(x2 +y2) without intermediate overflow or underflow
ilogb(x)	Returns the integer part of the floating-point base logarithm of x
ldexp(x, y)	Returns x*2y
lgamma(x)	Returns the logarithm of the absolute value of the gamma function at x
llrint(x)	Rounds x to a nearby integer and returns the result as a long long integer
llround(x)	Rounds x to the nearest integer and returns the result as a long long integer
log(x)	Returns the natural logarithm of x
log10(x)	Returns the base 10 logarithm of x
log1p(x)	Returns the natural logarithm of x+1
log2(x)	Returns the base 2 logarithm of the absolute value of x
logb(x)	Returns the floating-point base logarithm of the absolute value of x
lrint(x)	Rounds x to a nearby integer and returns the result as a long integer
lround(x)	Rounds x to the nearest integer and returns the result as a long integer
modf(x, y)	Returns the decimal part of x and writes the integer part to the memory at the pointer y
nan(s)	Returns a NaN (Not a Number) value
nearbyint(x)	Returns x rounded to a nearby integer
nextafter(x, y)	Returns the closest floating point number to x in the direction of y
nexttoward(x, y)	Returns the closest floating point number to x in the direction of y
pow(x, y)	Returns the value of x to the power of y
remainder(x, y)	Return the remainder of x/y rounded to the nearest integer
remquo(x, y, z)	Calculates x/y rounded to the nearest integer, writes the result to the memory at the pointer z and returns the remainder.
rint(x)	Returns x rounded to a nearby integer
round(x)	Returns x rounded to the nearest integer
scalbln(x, y)	Returns x*Ry (R is usually 2)
scalbn(x, y)	Returns x*Ry (R is usually 2)
sin(x)	Returns the sine of x (x is in radians)
sinh(x)	Returns the hyperbolic sine of x
sqrt(x)	Returns the square root of x
tan(x)	Returns the tangent of x (x is in radians)
tanh(x)	Returns the hyperbolic tangent of x
tgamma(x)	Returns the value of the gamma function at x
trunc(x)	Returns the integer part of x


//////////////////////////////////////////////////////////////////
<ctime>
The <ctime> library has a variety of functions that allow you to measure dates and times.

Function	Description
asctime()	Returns a C-style string representation of the time in a tm structure
clock()	Returns a number representing the amount of time that has passed while the program is running
ctime()	Returns a C-style string representation of the time in a timestamp
difftime()	Returns the time difference between two timestamps
gmtime()	Converts a timestamp into a tm structure representing its time at the GMT time zone
localtime()	Converts a timestamp into a tm structure representing its time in the system's local time zone
mktime()	Converts a tm structure into a timestamp
strftime()	Writes a C-style string representing the date and time of a tm structure with a variety of formatting options
time()	Returns a timestamp representing the current moment in time


//////////////////////////////////////////////////////////////////
<algorithm>
The <algorithm> library has many functions that allow you to modify ranges of data from data structures.

A list of useful functions in the algorithm library can be found below.

Function	Description
adjacent_find()	Finds a pair of consecutive elements with the same value in a data range
all_of()	Checks if all of the elements in a data range match a condition
any_of()	Checks if at least one element in a data range matches a condition
binary_search()	An efficient algorithm for finding if a value exists in a sorted data range
copy()	Copies the values from a data range into a different data range
count()	Counts the number of times that a value occurs in a data range
count_if()	Counts the number of elements in a data range that match a condition
fill()	Writes a value into every element of a data range
find()	Finds the first element of a data range with a specified value
find_first_of()	Finds the first element of a data range which matches one of several specified values
find_if()	Finds the first element of a data range which matches a condition
find_if_not()	Finds the first element of a data range which does not match a condition
for_each()	Runs a function on every element in a data range
includes()	Checks if all of the values in a sorted data range exist in another sorted data range
is_permutation()	Checks if a data range is a permutation of another
is_sorted()	Checks if a data range is sorted
is_sorted_until()	Finds the position in a data range at which elements are no longer sorted
lower_bound()	Finds the first element at or above a specified lower bound in a sorted data range
max_element()	Finds the element with the highest value in a data range
merge()	Merges the values of two data ranges into a new data range
min_element()	Finds the element with the lowest value in a data range
none_of()	Checks if none of the elements in a data range match a condition
random_shuffle()	Randomly rearranges the elements in a data range
replace()	Replaces all occurrences of a value in a data range with a different value
replace_copy()	Creates a copy of a data range with all occurrences of a specified value replaced with a different value
replace_copy_if()	Creates a copy of a data rage where all values that match a condition are replaced with a different value
replace_if()	Replaces all values in a data range that match a condition with a different value
reverse()	Reverses the order of elements in a data range
reverse_copy()	Creates a copy of a data range with the elements in reverse order
search()	Finds a specified sequence of values in a data range
sort()	Sorts the values of a data range in ascending order
swap()	Swaps the values of two variables
swap_ranges()	Swaps the values of two data ranges of the same size
upper_bound()	Finds the first element above a specified upper bound in a sorted data range


//////////////////////////////////////////////////////////////////